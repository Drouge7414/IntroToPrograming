Lab 7-2: Accumulating Totals in Single-Level Control Break Programs

Learning Objectives 7.1, 7.2

In this lab, you will use what you have learned about accumulating totals in a single-level control break
program to complete a C++ program. The program should produce a report for a supermarket manager to
help her keep track of hours worked by her part-time employees. The report should include the day of the
week and the number of hours worked for each employee for each day of the week and the total hours for the
day of the week. The report should look similar to the one shown in Figure 7-6.
The student file provided for this lab includes the necessary variable declarations and input and output
statements. You need to implement the code that recognizes when a control break should occur. You also
need to complete the control break code. Be sure to accumulate the daily totals for all days in the week.

7.2 Understanding Sequential Files and Control Break Logic 105

Figure 7-6 Super Market program report

Chapter 7 File Handling and Applications106

Comments in the code tell you where to write your code. You can use the Client By State program in this
chapter as a guide for this new program.

1. Open the source code file named SuperMarket.cpp using Notepad or the text editor of your
choice.
2. Study the prewritten code to understand what has already been done.
3. Write the control break code, including the code for the dayChange() function, in the main()
function.
4. Save this source code file in a directory of your choice, and then make that directory your working
directory.
5. Compile the source code file, SuperMarket.cpp.
6. Execute this program using the following input values:
Monday—6 hours (employee 1), 3 hours (employee 2), 4 hours (employee 3)
Tuesday—4 hours (employee 1), 2 hours (employee 2)
Wednesday—2 hours (employee 1), 4 hours (employee 2), 6 hours (employee 3)
Thursday—4 hours (employee 1)
Friday—3 hours (employee 1), 4 hours (employee 2), 3 hours (employee 3)
Saturday—7 hours (employee 1), 7 hours (employee 2), 7 hours (employee 3)
Sunday—0 hours
